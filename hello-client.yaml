# The deployments below both run a simple loop that attempts to access the hello-server
# endpoint:
#
# hello-client-pass:
#   Runs a single pod labeled with app=pass, which matches the ingress rule for
#   the hello-server service defined in the network policy and will therefore still be
#   able to access the service when the network policy is enabled.
#
# hello-client-fail:
#   Runs a single pod lacking the app=fail label, which does not match the ingress rule
#   for the hello-server service defined in the network policy. Once the network policy
#   is enabled, the pod will lose access to the service.

# hello-client-pass deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-client-pass
spec:
  # Only run a single pod
  replicas: 1

  # Control any pod labeled with app=pass
  selector:
    matchLabels:
      app: pass

  # Define pod properties
  template:

    # Ensure created pods are labeled with app=pass to match the deployment selector
    metadata:
      labels:
        app: pass
    spec:
      # This pod does not require access to the Kubernetes API server, so we prevent
      # even the default token from being mounted
      automountServiceAccountToken: false

      # Pod-level security context to define the default UID and GIDs under which to
      # run all container processes. We use 9999 for all IDs since it is unprivileged
      # and known to be unallocated on the node instances.
      securityContext:
        runAsUser: 9999
        runAsGroup: 9999
        fsGroup: 9999

      # Define container properties
      containers:
      - image: centos:7
        name: hello-client-pass

        # A simple while loop that attempts to access the hello-server service every
        # two seconds.
        command: ["sh", "-c"]
        args: ["while true; do wget -qO- --timeout=2 http://hello-server.default.svc:8080; sleep 2; done"]

        # Container-level security settings
        # Note, containers are unprivileged by default
        securityContext:
          # Prevents the container from writing to its filesystem
          readOnlyRootFilesystem: true

---
# hello-client-fail deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-client-fail
spec:

  replicas: 1
  selector:
    matchLabels:
      app: fail

  # Define pod properties
  template:

    # Ensure created pods are labeled with app=fail to match the deployment selector
    metadata:
      labels:
        app: fail
    spec:
      # This pod does not require access to the Kubernetes API server, so we prevent
      # even the default token from being mounted
      automountServiceAccountToken: false

      # Pod-level security context to define the default UID and GIDs under which to
      # run all container processes. We use 9999 for all IDs since it is unprivileged
      # and known to be unallocated on the node instances.
      securityContext:
        runAsUser: 9999
        runAsGroup: 9999
        fsGroup: 9999

      # Define container properties
      containers:
      - image: centos:7
        name: hello-client-fail

        # A simple while loop that attempts to access the hello-server service every
        # two seconds.
        command: ["sh", "-c"]
        args: ["while true; do wget -qO- --timeout=2 http://hello-server.default.svc:8080; sleep 2; done"]

        # Container-level security settings
        # Note, containers are unprivileged by default
        securityContext:
          # Prevents the container from writing to its filesystem
          readOnlyRootFilesystem: true
